x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  consensus:
    build:
      context: ./sentinelhub
      dockerfile: ${SENTINEL_DOCKERFILE}
      args:
        - USER=sentinel
        - DAEMON_VERSION=${SENTINEL_VERSION}
        - DAEMON_HOME=/cosmos
        - DAEMON_NAME=sentinelhub
    image: sentinel:${SENTINEL_VERSION}
    pull_policy: never
    user: sentinel
    restart: unless-stopped
    stop_grace_period: 5m
    environment:
      - DAEMON_VERSION=${SENTINEL_VERSION}
      - EXTRA_FLAGS=${SENTINEL_EXTRA_FLAGS:-}
      - NETWORK=${NETWORK}
      - MONIKER=${MONIKER}
      - CL_GRPC_PORT=${CL_GRPC_PORT:-9090}
      - CL_P2P_PORT=${CL_P2P_PORT:-26656}
      - CL_RPC_PORT=${CL_RPC_PORT:-26657}
      - CL_REST_PORT=${CL_REST_PORT:-1317}
      - RPC_PORT=${RPC_PORT:-8545}
      - WS_PORT=${WS_PORT:-8546}
      - SNAPSHOT=${SNAPSHOT}
      - RAPID_SYNC_URL=${RAPID_SYNC_URL}
      - DAEMON_HOME=/cosmos
      - DAEMON_NAME=sentinelhub
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PRUNING=${SENTINEL_PRUNING:-default}
      - MIN_RETAIN_BLOCKS=${SENTINEL_MIN_RETAIN_BLOCKS:-0}
    ports:
      - ${CL_P2P_PORT:-26656}:${CL_P2P_PORT:-26656}/tcp
    <<: *logging
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - consensus-data:/cosmos
    entrypoint:
      - docker-entrypoint.sh
    labels:
      - traefik.enable=true
      - traefik.http.routers.${RPC_HOST:-sentinel-rpc}.service=${RPC_HOST:-sentinel-rpc}
      - traefik.http.routers.${RPC_HOST:-sentinel-rpc}.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-sentinel-rpc}.rule=Host(`${RPC_HOST:-sentinel-rpc}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-sentinel-rpc}.tls.certresolver=letsencrypt
      - traefik.http.routers.${RPC_HOST:-sentinel-rpc}.lb.service=${RPC_HOST:-sentinel-rpc}
      - traefik.http.routers.${RPC_HOST:-sentinel-rpc}.lb.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-sentinel-rpc}.lb.rule=Host(`${RPC_LB:-sentinel-rpc-lb}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-sentinel-rpc}.lb.tls.certresolver=letsencrypt
      - traefik.http.services.${RPC_HOST:-sentinel-rpc}.loadbalancer.server.port=${CL_RPC_PORT:-26657}
      - traefik.http.routers.${REST_HOST:-sentinel-rest}.service=${REST_HOST:-sentinel-rest}
      - traefik.http.routers.${REST_HOST:-sentinel-rest}.entrypoints=websecure
      - traefik.http.routers.${REST_HOST:-sentinel-rest}.rule=Host(`${REST_HOST:-sentinel-rest}.${DOMAIN}`)
      - traefik.http.routers.${REST_HOST:-sentinel-rest}.tls.certresolver=letsencrypt
      - traefik.http.routers.${REST_HOST:-sentinel-rest}.lb.service=${REST_HOST:-sentinel-rest}
      - traefik.http.routers.${REST_HOST:-sentinel-rest}.lb.entrypoints=websecure
      - traefik.http.routers.${REST_HOST:-sentinel-rest}.lb.rule=Host(`${REST_LB:-sentinel-rest-lb}.${DOMAIN}`)
      - traefik.http.routers.${REST_HOST:-sentinel-rest}.lb.tls.certresolver=letsencrypt
      - traefik.http.services.${REST_HOST:-sentinel-rest}.loadbalancer.server.port=${CL_REST_PORT:-1317}
      - traefik.http.routers.${WS_HOST:-sentinelws}.service=${WS_HOST:-sentinelws}
      - traefik.http.routers.${WS_HOST:-sentinelws}.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-sentinelws}.rule=Host(`${WS_HOST:-sentinelws}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-sentinelws}.tls.certresolver=letsencrypt
      - traefik.http.routers.${WS_HOST:-sentinelws}.lb.service=${WS_HOST:-sentinelws}
      - traefik.http.routers.${WS_HOST:-sentinelws}.lb.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-sentinelws}.lb.rule=Host(`${WS_LB:-sentinelws-lb}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-sentinelws}.lb.tls.certresolver=letsencrypt
      - traefik.http.services.${WS_HOST:-sentinelws}.loadbalancer.server.port=${WS_PORT:-8546}
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=26660
      - metrics.instance=sentinel
      - metrics.network=${NETWORK}

  cli:
    image: sentinel:${SENTINEL_VERSION}
    pull_policy: never
    user: sentinel
    profiles:
      - tools
    restart: "no"
    entrypoint:
      - sentinelhub
    environment:
      - DAEMON_HOME=/cosmos
    volumes:
      - consensus-data:/cosmos

  create-validator-keys:
    image: sentinel:${SENTINEL_VERSION}
    pull_policy: never
    user: sentinel
    profiles:
      - tools
    restart: "no"
    environment:
      - MONIKER=${MONIKER}
    volumes:
      - ./keys/consensus:/cosmos/config
    entrypoint:
      - sh
      - -c
      - |
        set -eu
        echo "Creating consensus keys"
        if [ -f /cosmos/config/priv_validator_key.json ]; then
          echo "File already exists, aborting."
          exit 1
        fi
        cd /tmp
        sentinelhub tendermint gen-validator > /cosmos/config/priv_validator_key.json
        echo '{"height":"0","round":"0","step":0}' > /cosmos/config/priv_validator_state.json
        echo '{}'  > /cosmos/config/voter_state.json
        ls -la /cosmos/config/
        echo "Keys created!"

  create-operator-wallet:
    image: sentinel:${SENTINEL_VERSION}
    pull_policy: never
    user: sentinel
    profiles:
      - tools
    restart: "no"
    environment:
      - MONIKER=${MONIKER}
    volumes:
      - ./keys/operator:/data
    entrypoint:
      - sh
      - -c
      - |
        set -eu
        echo "Creating operator wallet"
        if [ -f /data/${MONIKER}.info ]; then
          echo "File already exists, aborting."
          exit 1
        fi
        cd /tmp
        mkdir -p /data

        # Create key
        sentinelhub keys add "${MONIKER}" --keyring-backend test --output json > /data/${MONIKER}.info
        # backup key
        sentinelhub keys export "${MONIKER}" --keyring-backend test --unsafe > /data/${MONIKER}.backup

        # Store address for ease of use
        jq -r '.address' /data/${MONIKER}.info > /data/${MONIKER}.address

        ls -la /data/
        echo "Key created!"

  register-validator:
    image: sentinel:${SENTINEL_VERSION}
    pull_policy: never
    user: sentinel
    profiles:
      - tools
    restart: "no"
    environment:
      - MONIKER=${MONIKER}
    volumes:
      - consensus-data:/cosmos
      - ./keys/operator:/data
      - ./keys/consensus:/keys
    entrypoint:
      - sh
      - -c
      - |
        set -eu
        echo "Registering validator ${MONIKER}"
        if [ ! -f /data/${MONIKER}.info ]; then
          echo "Operator wallet not found, aborting."
          exit 1
        fi
        if [ ! -f /keys/priv_validator_key.json ]; then
          echo "Validator key not found, aborting."
          exit 1
        fi

        cd /tmp

        # Get the validator address
        VAL_PUBKEY=$(sentinelhub tendermint show-validator --home=/cosmos)
        WALLET_ADDR=$(cat /data/${MONIKER}.address)

        echo "Creating validator with pubkey ${VAL_PUBKEY} and wallet ${WALLET_ADDR}"

        # Register the validator
        sentinelhub tx staking create-validator \
          --amount=1000000udvpn \
          --pubkey="${VAL_PUBKEY}" \
          --moniker="${MONIKER}" \
          --chain-id=${NETWORK} \
          --commission-rate="0.10" \
          --commission-max-rate="0.20" \
          --commission-max-change-rate="0.01" \
          --min-self-delegation="1" \
          --gas="auto" \
          --gas-adjustment=1.5 \
          --gas-prices=0.1udvpn \
          --home=/cosmos \
          --from=${WALLET_ADDR} \
          --keyring-backend=test \
          -y

        echo "Validator registered!"

volumes:
  consensus-data:
